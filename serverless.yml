service: amc-waiver
plugins:
  - serverless-python-requirements
  - serverless-wsgi
  - serverless-domain-manager
  - serverless-plugin-warmup
  - serverless-apigw-binary
  - serverless-plugin-aws-alerts

custom:
  wsgi:
    app: app.app
    packRequirements: false
  pythonRequirements:
    dockerizePip: true
  customDomain:
    domainName: amc-waiver.heychao.com
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: false
  apigwBinary: 
    types:
      - 'image/jpeg'
      - 'text/html'
      - 'application/zip'
      - 'multipart/form-data'
  alerts:
    stages:
      - dev
    dashboards: true
    definitions:  # these defaults are merged with your definitions
      functionThrottles:
        period: 300 # override period
      functionErrors:
        period: 300 # override period
    topics:
      alarm: 
        topic: ${self:service}-${opt:stage, self:provider.stage}-alerts-alarm
        notifications:
          - protocol: email
            endpoint: chaoranxie@gmail.com
    alarms:
      - functionErrors
      - functionThrottles      
package:
  exclude:
    - node_modules/**
    - venv/**
provider:
  name: aws
  runtime: python2.7
  stage: dev
  region: us-east-1
  memorySize: 128
  environment:
    SECRET_KEY: ${env:SECRET_KEY}
    API_GATEWAY_BASE_PATH: ${self:custom.customDomain.basePath}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'lambda:InvokeFunction'
      Resource:
      - Fn::Join:
        - ':'
        - - arn:aws:lambda
          - Ref: AWS::Region
          - Ref: AWS::AccountId
          - function:${self:service}-${opt:stage, self:provider.stage}-*
            
functions:
  app:
    handler: wsgi.handler
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'
    warmup: true

